name: CI

on:
  push:
    branches:
      - main
      - '**'
  pull_request:
    branches:
      - main

jobs:
  check-version-incremented:
    name: Verify Application Version Incremented
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Version
        run: |
          current_version=$(cat VERSION)
          previous_version=$(docker image ls --filter "reference=***/web-portfolio" --format "{{.Repository}}:{{.Tag}}" | awk -F ':' '{print $2}')
          if [[ $current_version = $previous_version ]]; then echo 'Update semantic version in VERSION file'; exit 1; fi

  validate-docker-compose:
    name: Validate Docker Compose Files
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Validate Docker Compose file
        run: docker-compose -f docker-compose.yml config

  test-mail-server:
    name: Test Mail Server
    runs-on: ubuntu-latest
    needs: validate-docker-compose
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Test
        run: npm --prefix mail-server/ run test

  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: validate-docker-compose
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          current_version=$(cat VERSION)
          previous_version=$(docker image ls --filter "reference=${{ secrets.DOCKER_USERNAME }}/web-portfolio" --format "{{.Repository}}:{{.Tag}}" | awk -F ':' '{print $2}')
          if [[ $current_version -eq $previous_version ]]; then echo 'Update semantic version in VERSION file'; exit 1; fi
          docker build -t ${{ secrets.DOCKER_USERNAME }}/web-portfolio:$current_version -t ${{ secrets.DOCKER_USERNAME }}/web-portfolio:latest .
          docker save --output portfolio-versioned.docker ${{ secrets.DOCKER_USERNAME }}/web-portfolio:$current_version
          docker save --output portfolio-latest.docker ${{ secrets.DOCKER_USERNAME }}/web-portfolio:latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: portfolio-docker-images
          path: |
            portfolio-versioned.docker
            portfolio-latest.docker

  push-docker-image:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: build-docker-image
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: portfolio-docker-images

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: |
          docker load --input ./portfolio-versioned.docker
          docker load --input ./portfolio-latest.docker
          current_version=$(cat VERSION)
          docker push ${{ secrets.DOCKER_USERNAME }}/web-portfolio:$current_version
          docker push ${{ secrets.DOCKER_USERNAME }}/web-portfolio:latest

  deploy-docker-compose:
    name: Deploy Docker Compose
    runs-on: ubuntu-latest
    needs: push-docker-image
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Ensure SSH key is available
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Check SSH connection
        run: ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'echo "SSH connection successful"'

      - name: Copy Docker Compose file to remote server
        run: |
          ssh-keyscan -t ed25519 ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hostsz
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/srv/app/web-portfolio/docker-compose.yml

      - name: Update Docker Swarm service
        run: ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'docker stack deploy -c /srv/app/web-portfolio/docker-compose.yml hosted-apps'
